((3) 0 () 0 () () (h ! (equal) ((p+ #"C:\\Users\\Administrator\\Desktop\\github-projects\\racket-zh\\_src\\posts\\2018-06-14-bindings-as-sets-of-scopes.md" . windows) f post (u . "Bindings as Sets of Scopes") (p+ #"C:\\Users\\Administrator\\Desktop\\github-projects\\racket-zh\\_src\\posts\\2018-06-14-bindings-as-sets-of-scopes.md" . windows) 1529210990 (p+ #"C:\\Users\\Administrator\\Desktop\\github-projects\\racket-zh\\2018/06/bindings-as-sets-of-scopes.html" . windows) (u . "/2018\\06\\bindings-as-sets-of-scopes.html") (u . "2018-06-14T14:19:35") #f #f (c (u . "Macro") c (u . "Racket") c (u . "Author: Syntacticlsoure")) (u . "\n<h1 id=\"introduction\">Introduction</h1>\n\n<p>Racket的宏系统的实现被称为Bindings as Sets of Scopes，每个identifier拥有一个代表当前作用域的集合。\n <br />举例说明:</p>") #t (u . "\n<h1 id=\"introduction\">Introduction</h1>\n\n<p>Racket的宏系统的实现被称为Bindings as Sets of Scopes，每个identifier拥有一个代表当前作用域的集合。\n <br />举例说明:</p>\n<!-- more-->\n\n<div class=\"brush: racket\">\n <div class=\"pygments\">\n  <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"p\">]))</span>\n  <span class=\"n\">a</span>\n  <span class=\"p\">)</span>\n</pre></div>\n\n</div>\n\n<p>外层的a与内层的a作用域不同，也就是两个a不是同一个identifier，我们可以通过free-identifier=?函数判断两个identifier是否是同一个，这将会返回#f。  如果我们将第一个let代表的作用域记为local1，第二个记作local2的话，那么内层的a所拥有的作用域集是{local1,local2}，  外层a是{local1}。</p>\n\n<p>那么racket是如何确定我们返回的a是哪个a呢？</p>\n\n<p>为了区别两个a，我们需要一个独一无二的名字，let在绑定变量的时候会将这个identifier和实际绑定的名字联系起来。 let在被展开的时候，会给body部分打上对应的作用域标记。</p>\n\n<p>因此，我们返回的a的作用域集是{local1,local2}，然后去寻找这个作用域最大子集所代表的identifier（当然名字要一样，这里忽略了rename-transformer的情况），也就是内层的a。</p>\n\n<h1 id=\"宏展开\">宏展开</h1>\n\n<p>为了防止不卫生的宏污染我们的变量，我们可以给宏展开中增加的语法结构打上一层作用域标记，这样我们就无法引用到宏内声明的变量了。</p>\n\n<p>这是通过在宏展开前后翻转一个新的宏作用域(fresh macro-introduction scope)标记来实现的。</p>"))))